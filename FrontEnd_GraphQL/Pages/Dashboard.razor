@page "/dashboard"

@using BlazorBootstrap
@using FrontEnd_GraphQL.Application.Interfaces
@using FrontEnd_GraphQL.Application.Models
@using FrontEnd_GraphQL.Component.Tables
@using FrontEnd_GraphQL.Helpers.Paging

@inject ICommissionsService _commissionsService;


<div class="content content-dashboard">

    <div class="container-chart">
        @* Chart *@
@*         <LineChart @ref="lineChart" Class="mb-4" />

        <BlazorBootstrap.Button Type="BlazorBootstrap.ButtonType.Button" Color="BlazorBootstrap.ButtonColor.Primary" Size="BlazorBootstrap.Size.Small" @onclick="async () => await RandomizeAsync()"> Randomize </BlazorBootstrap.Button>

        <BlazorBootstrap.Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="BlazorBootstrap.Size.Small" @onclick="async () => await AddDatasetAsync()"> Add Dataset </BlazorBootstrap.Button>
        <BlazorBootstrap.Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="BlazorBootstrap.Size.Small" @onclick="async () => await AddDataAsync()"> Add Data </BlazorBootstrap.Button>
        <BlazorBootstrap.Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="BlazorBootstrap.Size.Small" @onclick="async () => await ShowHorizontalLineChartAsync()"> Horizontal Line Chart </BlazorBootstrap.Button>
        <BlazorBootstrap.Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="BlazorBootstrap.Size.Small" @onclick="async () => await ShowVerticalLineChartAsync()">
            Vertical Line Chart
        </BlazorBootstrap.Button> *@
    </div>

    <div class="container-table">

        <div class="row container-filters">
            <div class="col">
                <label for="start_date" class="form-label">Start Date:</label>
                <input type="date" class="form-control" id="start_date" @bind="start_date" />
            </div>
            <div class="col">
                <label for="end_date" class="form-label">End Date:</label>
                <input type="date" class="form-control" id="end_date" @bind="end_date" />
            </div>
        </div>
        <div class="row mt-3 container-search">
            <div class="col">
                <button class="btn btn-primary" @onclick="Search">Search</button>
            </div>
        </div

        <div class="container-summary">
            <p>Total items: <b>@publisherCommissions?.Count</b></p>
            <p>Items displayed: <b>@publisherCommissions?.Records?.Count</b></p>

            @if (payloadComplete == true)
            {
                <button type="button" class="btn btn-outline-primary" disabled>Next request</button>
            }
            else
            {
                <button type="button" class="btn btn-outline-primary" @onclick="NextRequest">Next request</button>
            }
            
            
        </div>

        <Table_custom Data="@publisherCommissions?.Records"></Table_custom>
    </div>
</div>


@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private int datasetsCount;
    private int labelsCount;

    // Data
    private PublisherCommissions publisherCommissions = new();
    private string? maxCommissionId = Guid.Empty.ToString();
    private bool? payloadComplete = false;

    private DateTime start_date = DateTime.UtcNow.AddDays(-30);
    private DateTime end_date = DateTime.UtcNow;

    private Random random = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCommissions();
    }

    private async Task GetCommissions()
    {
        publisherCommissions = await _commissionsService.GetCommissionsPaginated(start_date, end_date, maxCommissionId);

        maxCommissionId = publisherCommissions?.MaxCommissionId;
        payloadComplete = publisherCommissions?.PayloadComplete;
    }

    private async Task Search()
    {
         await GetCommissions();
    }

    private async Task NextRequest()
    {
         await GetCommissions();
    }
    

}
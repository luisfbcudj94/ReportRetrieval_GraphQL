@page "/"

@using BlazorBootstrap
@using FrontEnd_GraphQL.Application.Interfaces
@using FrontEnd_GraphQL.Application.Models
@using FrontEnd_GraphQL.Component.Tables
@using FrontEnd_GraphQL.Helpers.Paging
@using System.Text

@inject IJSRuntime jsRuntime
@inject ICommissionsService _commissionsService;
@inject ICSVService _CSVService;

<Preload LoadingText="Loading..." />

<div class="content content-dashboard">

    <div class="container-table">

        <div class="container container-filters">
            <div class="row">

                <div class="col p-2 w-90">
                    <h2 class="color-title">Filters</h2>
                    <div class="mt-3">Select the field by which you want to filter the data</div>

                    <div class="form-check mt-4">
                        <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" @onchange="HandleShowFilterDateChange" checked>
                        <label class="form-check-label" for="flexRadioDefault1">
                            By Post date
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" @onchange="HandleShowFilterOrderIdChange">
                        <label class="form-check-label" for="flexRadioDefault2">
                            By Order Id
                        </label>
                    </div>
                </div>

                <div class="col p-2 w-90">
                    @if (showFilterDate && !showFilterOrderId)
                    {
                        <div class="col">
                            <label for="start_date" class="form-label">Start Date:</label>
                            <input type="date" class="form-control" id="start_date" @bind="start_date" />
                        </div>
                        <div class="col">
                            <label for="end_date" class="form-label">End Date:</label>
                            <input type="date" class="form-control" id="end_date" @bind="end_date" />
                        </div>
                    }

                    @if (!showFilterDate && showFilterOrderId)
                    {
                        <div class="col">
                            <label for="orderId" class="form-label">Order Id:</label>
                            <input type="text" class="form-control" id="orderId" @bind="orderId" />
                        </div>
                    }
                    
                    <div class="row">
                        <div class="col mt-3 d-flex justify-content-center">
                            <button class="btn btn-primary w-50" @onclick="Search">Search</button>
                        </div>
                    </div>

                </div>
            </div>
        </div>

        <div class="container-summary mt-4">
            <p>Total items: <b>@totalItems</b></p>
            <p>Items displayed: <b>@dataCount</b></p>

            @if (dataCount != null && dataCount > 0 && showFilterDate)
            {
                <button type="button" class="btn btn-outline-success" @onclick="DownloadCSV">download data</button>
            }
            else
            {
                <button type="button" class="btn btn-outline-success" disabled>download data</button>
            }
        </div>
        
        <Table_custom 
            data="@dataToExport"
            pageNumber="pageNumber"
            pageSize="@pageSize"
            pageCount="@pageCount"
            hasPrevious="@hasPrevious"
            hasNext="@hasNext"
            OnGetData="SetDataRequest">
        </Table_custom>
    </div>
</div>


@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private int datasetsCount;
    private int labelsCount;

    // Data
    private PublisherCommissions publisherCommissions = new();
    private string? maxCommissionId;
    private bool? payloadComplete;
    private int? dataCount;
    private int? totalItems;
    private int numberOfRequest;

    // Paginated
    public int pageNumber;
    public int pageSize;
    public int pageCount = 0;
    public bool hasPrevious = false;
    public bool hasNext = false;

    // Filters
    private bool showFilterDate = true;
    private bool showFilterOrderId = false;

    private DateTime? start_date;
    private DateTime? end_date;
    private string? orderId;

    private Random random = new();

    private List<Commissions>? dataToExport = new List<Commissions>();

    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {

        SetData();
        SetDates();
        await GetCommissions();
    }

    private async Task GetCommissions()
    {
        try
        {
            PreloadService.Show(SpinnerColor.Warning);

            publisherCommissions = await RequestCommisions();

            if (publisherCommissions != null)
            {
                dataToExport = publisherCommissions.Records;
                maxCommissionId = publisherCommissions.MaxCommissionId;
                payloadComplete = publisherCommissions.PayloadComplete;
                dataCount = publisherCommissions.Records?.Count;
                totalItems = publisherCommissions.Count;
                numberOfRequest += 1;

                // Paginated
                pageNumber = publisherCommissions.PageNumber;
                pageSize = publisherCommissions.PageSize;
                pageCount = publisherCommissions.PageCount;
                hasPrevious = publisherCommissions.HasPrevious;
                hasNext = publisherCommissions.HasNext;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task<PublisherCommissions> RequestCommisions()
    {
        var response = await _commissionsService.GetCommissionsPaginated(start_date?.ToString("yyyy-MM-dd HH:mm:ss"), end_date?.ToString("yyyy-MM-dd HH:mm:ss"), maxCommissionId, orderId, pageNumber, pageSize);

        return response;
    }

    private async Task Search()
    {
        if (showFilterOrderId)
        {
            Guid orderIdGuid;
            if (Guid.TryParse(orderId, out orderIdGuid))
            {
                SetData();
                await GetCommissions();
            }
            else
            {
                throw new ArgumentException("The entered order ID is not a valid GUID.");
            }
        }
        else
        {
            SetData();
            await GetCommissions();
        }

    }

    private void SetData()
    {
        maxCommissionId = Guid.Empty.ToString();
        numberOfRequest = 0;
        dataCount = 0;
        totalItems = 0;
        payloadComplete = null;
        pageNumber = 1;
        pageSize = 25;
    }

    private void SetDates()
    {
        start_date = DateTime.UtcNow.AddDays(-7);
        end_date = DateTime.UtcNow;
    }

    public async Task SetDataRequest(PaginatedArgs args)
    {
        if (args.PageNumber > 0)
        {
            pageNumber = args.PageNumber;
        }

        if (args.PageSize > 0)
        {
            pageSize = args.PageSize;
        }

        await GetCommissions();
    }

    void HandleShowFilterDateChange(ChangeEventArgs args)
    {
        showFilterDate = args.Value.ToString() == "on" ? true : false;
        showFilterOrderId = false;

        if (showFilterDate)
        {
            SetDates();
            orderId = null;
        }
    }

    void HandleShowFilterOrderIdChange(ChangeEventArgs args)
    {
        start_date = null;
        end_date = null;
        showFilterDate = false;
        showFilterOrderId = args.Value.ToString() == "on" ? true : false;
    }

    private async Task DownloadCSV()
    {
        try
        {
            PreloadService.Show(SpinnerColor.Warning);

            await jsRuntime.InvokeAsync<object>("eval", @"
                window.saveAsFile = function(filename, data) {
                    const blob = new Blob([data], { type: 'text/csv' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = filename;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                }
            ");

            var auxPageSize = pageSize;
            var auxPageNumber = pageNumber;

            pageSize = int.MaxValue;
            pageNumber = 1;
            var excelData = await RequestCommisions();

            string csvContent = ConvertToCsv(excelData?.Records);
            string fileName = "publisherCommissions.csv";

            if (!string.IsNullOrEmpty(csvContent))
            {
                await jsRuntime.InvokeAsync<object>("saveAsFile", fileName, csvContent);
            }

            pageSize = auxPageSize;
            pageNumber = auxPageNumber;
            await GetCommissions();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error downloading CSV: " + ex.Message);
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private string ConvertToCsv(List<Commissions>? commissions)
    {
        if (commissions != null)
        {
            StringBuilder csvBuilder = new StringBuilder();

            csvBuilder.AppendLine("CommissionId,AdvertiserName,ActionType,SaleAmountUsd,OrderDiscountUsd,PubCommissionAmountUsd,ActionTrackerName,WebsiteName,Aid,PostingDate,EventDate,OrderId,Coupon,IsCrossDevice");

            foreach (var commission in commissions)
            {
                csvBuilder.AppendLine($"{commission.CommissionId},{commission.AdvertiserName},{commission.ActionType},{commission.SaleAmountUsd},{commission.OrderDiscountUsd},{commission.PubCommissionAmountUsd},{commission.ActionTrackerName},{commission.WebsiteName},{commission.Aid},{commission.PostingDate},{commission.EventDate},{commission.OrderId},{commission.Coupon},{commission.IsCrossDevice}");
            }

            return csvBuilder.ToString();
        }

        return string.Empty;
    }
    

}
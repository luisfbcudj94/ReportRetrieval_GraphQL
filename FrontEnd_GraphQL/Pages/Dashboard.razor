@page "/dashboard"

@using BlazorBootstrap
@using FrontEnd_GraphQL.Application.Interfaces
@using FrontEnd_GraphQL.Application.Models
@using FrontEnd_GraphQL.Component.Tables
@using FrontEnd_GraphQL.Helpers.Paging
@using System.Text

@inject IJSRuntime jsRuntime
@inject ICommissionsService _commissionsService;
@inject ICSVService _CSVService;


<div class="content content-dashboard">

    <div class="container-table">

        <div class="row container-filters">
            <div class="col">
                <label for="start_date" class="form-label">Start Date:</label>
                <input type="date" class="form-control" id="start_date" @bind="start_date" />
            </div>
            <div class="col">
                <label for="end_date" class="form-label">End Date:</label>
                <input type="date" class="form-control" id="end_date" @bind="end_date" />
            </div>
        </div>
        <div class="row mt-3 container-search">
            <div class="col">
                <button class="btn btn-primary" @onclick="Search">Search</button>
            </div>
        </div

        <div class="container-summary">
            <p>Total items: <b>@totalItems</b></p>
            <p>Items displayed: <b>@dataCount</b></p>
            <p>Number of request: <b>@numberOfRequest</b></p>

            @if (payloadComplete == true || payloadComplete == null)
            {
                <button type="button" class="btn btn-outline-primary" disabled>Next request</button>
            }
            else
            {
                <button type="button" class="btn btn-outline-primary" @onclick="NextRequest">Next request</button>
            }

            @if (dataCount != null && dataCount > 0)
            {
                <button type="button" class="btn btn-outline-success" @onclick="DownloadCSV">Download</button>
            }
            else
            {
                <button type="button" class="btn btn-outline-success" disabled>Download</button>
            }
            
        </div>
        

        <Table_custom Data="@publisherCommissions?.Records"></Table_custom>
    </div>
</div>


@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private int datasetsCount;
    private int labelsCount;

    // Data
    private PublisherCommissions publisherCommissions = new();
    private string? maxCommissionId = Guid.Empty.ToString();
    private bool? payloadComplete = null;
    private int? dataCount = 0;
    private int? totalItems = 0;
    private int numberOfRequest = 0;

    private DateTime start_date = DateTime.UtcNow.AddDays(-7);
    private DateTime end_date = DateTime.UtcNow;

    private Random random = new();

    private List<Commissions>? dataToExport = new List<Commissions>();

    protected override async Task OnInitializedAsync()
    {
        await GetCommissions();
    }

    private async Task GetCommissions()
    {

        publisherCommissions = await _commissionsService.GetCommissionsPaginated(start_date, end_date, maxCommissionId);

        // numberOfRequest = (maxCommissionId != null && maxCommissionId != Guid.Empty.ToString() ) ? numberOfRequest + 1 : 0;

        dataToExport = publisherCommissions?.Records;
        maxCommissionId = publisherCommissions?.MaxCommissionId;
        payloadComplete = publisherCommissions?.PayloadComplete;
        dataCount = publisherCommissions?.Records?.Count;
        totalItems = publisherCommissions?.Count;

        // numberOfRequest = (maxCommissionId != null && maxCommissionId != Guid.Empty.ToString() ) ? numberOfRequest + 1 : 0;

        numberOfRequest += 1;


    }

    private async Task Search()
    {
        maxCommissionId = Guid.Empty.ToString();
        numberOfRequest = 0;
        dataCount = 0;
        totalItems = 0;
        payloadComplete = null;
        await GetCommissions();
    }

    private async Task NextRequest()
    {
        await GetCommissions();
    }

    private async Task DownloadCSV()
    {
        try
        {
            await jsRuntime.InvokeAsync<object>("eval", @"
                window.saveAsFile = function(filename, data) {
                    const blob = new Blob([data], { type: 'text/csv' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = filename;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                }
            ");

        string csvContent = ConvertToCsv(dataToExport);
        string fileName = "publisherCommissions.csv";
        await jsRuntime.InvokeAsync<object>("saveAsFile", fileName, csvContent);
            
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error downloading CSV: " + ex.Message);
        }
    }

    private string ConvertToCsv(List<Commissions> commissions)
    {
        StringBuilder csvBuilder = new StringBuilder();

        csvBuilder.AppendLine("CommissionId,AdvertiserName,ActionType,SaleAmountUsd,OrderDiscountUsd,PubCommissionAmountUsd,ActionTrackerName,WebsiteName,Aid,PostingDate,EventDate,OrderId,Coupon,IsCrossDevice");

        foreach (var commission in commissions)
        {
            csvBuilder.AppendLine($"{commission.CommissionId},{commission.AdvertiserName},{commission.ActionType},{commission.SaleAmountUsd},{commission.OrderDiscountUsd},{commission.PubCommissionAmountUsd},{commission.ActionTrackerName},{commission.WebsiteName},{commission.Aid},{commission.PostingDate},{commission.EventDate},{commission.OrderId},{commission.Coupon},{commission.IsCrossDevice}");
        }

        return csvBuilder.ToString();
    }
    

}
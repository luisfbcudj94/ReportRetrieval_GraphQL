@page "/configuration"


@using FrontEnd_GraphQL.Application.Interfaces
@using FrontEnd_GraphQL.Application.Models.SetApis
@using Newtonsoft.Json
@using Blazorise
@using System.Text.RegularExpressions
@using System.Text


@inject ISetApisService _setApisService;
@inject IBuildRequestService _buildRequestService;



<div class="col">
    <div class="row m-0">
        <div class="col-7">
            <div class="content p-3">
                <h3>Configure request parameters</h3>
                <div class="container-choose-api d-flex align-items-center mt-4">

                    <div class="col">
                        <div class="row">

                            <div class="col-5">
                                <label class="me-3">Choose an API o add a new one</label>
                            </div>

                            <div class="col-6">
                                <div class="dropdown" style="width: 200px;">
                                    <a class="btn btn-info dropdown-toggle w-100" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                                        APIs
                                    </a>

                                    <ul class="dropdown-menu w-100" aria-labelledby="dropdownMenuLink">
                                        @foreach (var item in apis)
                                        {
                                            <li>
                                                <a class="dropdown-item pointer prevent-overflowing" @onclick="() => GetApiData(item.Id)">@item.Name</a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>



                            <div class="col-1 d-flex align-items-center">
                                <button class="btn btn-outline-primary ms-3 btn-add-item" @onclick="() => ShowApiFields()">
                                    <i class="fa-regular fa-plus"></i>
                                </button>
                            </div>

                        </div>
                    </div>
                </div>

                @if (showApiFields)
                {
                    <div class="container-info-api mt-3">

                        <div class="col">
                            <div class="row">
                                <div class="col-5">
                                    <label class="me-3">Write the name of the API:</label>
                                </div>
                                <div class="col-6">
                                    <input type="text" class="form-control" id="apiName" @bind="apiName" placeholder="API name" />
                                </div>
                            </div>

                            <div class="row mt-3">

                                <div class="col-5">
                                    <label class="me-3">Select the type of the API:</label>
                                </div>

                                <div class="col-6 d-flex justify-content-between">

                                    @if (apiTypes != null)
                                    {
                                        @foreach (var item in apiTypes)
                                        {
                                            <div class="form-check-inline">
                                                <input class="form-check-input pointer" type="radio" name="apiTypesRadioButton" id="@item.Name" @onchange="SetApiType" value="@item.Name">
                                                <label class="form-check-label pointer" for="@item.Name">
                                                    @item.Name
                                                </label>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <label>Error displaying API types</label>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="container-http-method mt-3">

                            <div class="col">
                                <div class="row">

                                    <div class="col-5">
                                        <label class="me-3">Select the HTTP Method:</label>
                                    </div>

                                    <div class="col-6 d-flex justify-content-between">

                                        @if (httpMethods != null)
                                        {
                                            @foreach (var item in httpMethods)
                                            {
                                                <div class="form-check-inline">
                                                    <input class="form-check-input pointer" type="radio" name="httpMethodRadioButton" id="@item.Name" @onchange="HandleHTTPMethodChange" value="@item.Name">
                                                    <label class="form-check-label pointer" for="@item.Name">
                                                        @item.Name
                                                    </label>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <label>Error displaying http methods</label>
                                        }
                                    </div>
                                </div>
                            </div>

                        </div>

                        <div class="container-url mt-4">

                            <div class="col">
                                <div class="row">

                                    <div class="col-3 d-flex align-items-center">
                                        <label for="url" class="form-label">URL</label>
                                    </div>
                                    <div class="col-8">
                                        <input type="text" class="form-control" id="url" @bind="url" />
                                    </div>
                                </div>

                                <div class="row mt-4">

                                    <div class="col-3">
                                        <label for="urlParams" class="form-label">Url params</label>
                                    </div>
                                    <div class="col-8 d-flex justify-content-between">
                                        <input type="text" class="form-control" id="urlParams" @bind="urlParamName" style="width:48%" placeholder="Name" />
                                        <input type="text" class="form-control" id="urlParams" @bind="urlParamValue" style="width:48%" placeholder="Value" />
                                    </div>
                                    <div class="col-1 d-flex align-items-center">
                                        <button class="btn btn-outline-primary ms-3 btn-add-item" @onclick="() => setUrlParams(urlParamName, urlParamValue)">
                                            <i class="fa-regular fa-plus"></i>
                                        </button>
                                    </div>

                                </div>

                                <div class="row">
                                    <div class="col">
                                        @for (int i = 0; i < urlParamsName.Count; i++)
                                        {
                                            var index = i;

                                            <div class="row mt-4">
                                                <div class="col-3"></div>
                                                <div class="col-8 d-flex justify-content-between">
                                                    <input type="text" class="form-control" id="urlParamsName" placeholder="Name" style="width:48%" value="@urlParamsName[index]" disabled />
                                                    <input type="text" class="form-control" id="urlParamsValue" placeholder="Value" style="width:48%" value="@urlParamsValue[index]" disabled />

                                                </div>
                                                <div class="col-1 d-flex align-items-center">
                                                    <i class="fa-solid fa-trash" style="color:red;cursor:pointer;" @onclick="() => deleteUrlParam(urlParamsName[index])"></i>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>


                        </div>

                        <div class="container-headers mt-4">

                            <div class="col">
                                <div class="row mt-4">

                                    <div class="col-3">
                                        <label for="headerParams" class="form-label">Header params</label>
                                    </div>
                                    <div class="col-8 d-flex justify-content-between">
                                        <input type="text" class="form-control" id="headerParams" @bind="headerParamName" placeholder="Name" style="width:48%" />
                                        <input type="text" class="form-control" id="headerParams" @bind="headerParamValue" placeholder="Value" style="width:48%" />
                                    </div>
                                    <div class="col-1 d-flex align-items-center">
                                        <button class="btn btn-outline-primary ms-3 btn-add-item" @onclick="() => setHeaderParams(headerParamName, headerParamValue)">
                                            <i class="fa-regular fa-plus"></i>
                                        </button>
                                    </div>

                                </div>
                                <div class="row">
                                    <div class="col">
                                        @for (int i = 0; i < headerParamsName.Count; i++)
                                        {
                                            var index = i;

                                            <div class="row mt-4">
                                                <div class="col-3"></div>
                                                <div class="col-8 d-flex justify-content-between">
                                                    <input type="text" class="form-control" id="headerParams" placeholder="Name" style="width:48%" value="@headerParamsName[i]" disabled />
                                                    <input type="text" class="form-control" id="headerParams" placeholder="Value" style="width:48%" value="@headerParamsValue[i]" disabled />

                                                </div>
                                                <div class="col-1 d-flex align-items-center">
                                                    <i class="fa-solid fa-trash" style="color:red;cursor:pointer;" @onclick="() => deleteHeaderParam(headerParamsName[index])"></i>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                        </div>

                        <div class="container-body mt-4">

                            <div class="col">
                                <div class="row mt-2">
                                    <div class="col-3">
                                        <label for="body" class="form-label">Body</label>
                                    </div>
                                    <div class="col-8">
                                        <div class="form-floating">
                                            <textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea2" style="height: 300px" @bind="body"></textarea>
                                            <label for="floatingTextarea2"></label>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-4">
                                    <div class="col-3">
                                        <label for="bodyParams" class="form-label">Body params</label>
                                    </div>
                                    <div class="col-8 d-flex justify-content-between">
                                        <input type="text" class="form-control" id="bodyParams" @bind="bodyParamName" style="width:48%" placeholder="Name" />
                                        <input type="text" class="form-control" id="bodyParams" @bind="bodyParamValue" style="width:48%" placeholder="Value" />
                                    </div>
                                    <div class="col-1 d-flex align-items-center">
                                        <button class="btn btn-outline-primary ms-3 btn-add-item" @onclick="() => setBodyParams(bodyParamName, bodyParamValue)">
                                            <i class="fa-regular fa-plus"></i>
                                        </button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        @for (int i = 0; i < bodyParamsName.Count; i++)
                                        {
                                            var index = i;

                                            <div class="row mt-4">
                                                <div class="col-3"></div>
                                                <div class="col-8 d-flex justify-content-between">
                                                    <input type="text" class="form-control" id="bodyParams" placeholder="Name" style="width:48%" value="@bodyParamsName[index]" disabled />
                                                    <input type="text" class="form-control" id="bodyParams" placeholder="Value" style="width:48%" value="@bodyParamsValue[index]" disabled />

                                                </div>
                                                <div class="col-1 d-flex align-items-center">
                                                    <i class="fa-solid fa-trash" style="color:red;cursor:pointer;" @onclick="() => deleteBodyParam(bodyParamsName[index])"></i>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>

                            </div>

                        </div>

                        <div class="container-test">
                        </div>

                    </div>
                }
                
            </div>

        </div>

        <div class="col-5 p-3">

            <div class="row">
                <div class="col-12">
                    <h3>Preview</h3>
                </div>
            </div>

            <div class="row mb-2 mt-3">
                <div class="col-12 d-flex justify-content-between">
                    <h5>Request</h5>
                    <button class="btn btn-outline-success" @onclick="() => displayPreview()">
                        <i class="fa-solid fa-arrows-rotate"></i>
                    </button>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="form-floating p-2" style="height: 300px;border: 1px solid black;    overflow: auto;">
                        <p>@ConvertToMarkupString(preview)</p>
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-12">
                    <h5>Response</h5>
                    <div class="form-floating p-2" style="height: 300px;border: 1px solid black;    overflow: auto;">
                        <p>@ConvertToMarkupString(@formattedJson(responseAPI))</p>
                    </div>
                </div>
            </div>

            <div class="row d-flex justify-content-center mt-4">
                <div class="col-10 d-flex justify-content-center">
                    <button class="btn btn-outline-primary ms-3" @onclick="TestApi">
                        Test API
                    </button>
                    <button class="btn btn-outline-success ms-3">
                        Save API configuration
                    </button>
                </div>
            </div>


        </div>
    </div>
</div>






 

@code {

    API? data = null;
    List<APIType>? apiTypes = null;
    APIType apiTypeSelected = new();
    List<HTTPMethods>? httpMethods = null;

    HTTPMethods? httpMethodSelected = null;

    string? url = null;
    string? urlParamName = null;
    string? urlParamValue = null;
    List<string> urlParamsName = new();
    List<string> urlParamsValue = new();

    string? apiName = null;

    List<string> headers = new();
    List<string> headerParamsName = new();
    List<string> headerParamsValue = new();
    string? headerParamName = null;
    string? headerParamValue = null;

    string? body = null;
    List<string> bodyParamsName = new();
    List<string> bodyParamsValue = new();
    string? bodyParamName = null;
    string? bodyParamValue = null;

    string preview = string.Empty;
    string bodyJson = string.Empty;

    string responseAPI = string.Empty;

    List<API> apis = new();

    bool showApiFields = false;


    protected override async Task OnInitializedAsync()
    {
        apiTypes = await _setApisService.GetTypesAPI();
        httpMethods = await _setApisService.GetHttpMethods();
        apis = await _setApisService.GetApis();

    }

    private async Task TestApi()
    {
        #region Create API model

        API apiData = new();
        apiData.ApiTypeId = apiTypeSelected?.Id;
        apiData.APIType = apiTypeSelected;

        #endregion


        #region Create URL model

        URL urlData = new();
        urlData.Value = this?.url;
        urlData.HTTPMethodId = httpMethodSelected?.Id;
        urlData.HttpMethods = httpMethodSelected;

        List<Tag> tagsToUrl = new List<Tag>();

        for (int i = 0; i < urlParamsName.Count; i++)
        {
            string paramName = urlParamsName[i];
            string paramValue = urlParamsValue[i];

            Tag tag = new Tag
            {
                Name = paramName,
                Value = paramValue 
            };
            tagsToUrl.Add(tag);
        }

        List<URLTag> urlTag = new List<URLTag>();

        foreach (var tag in tagsToUrl)
        {
            URLTag urlTagItem = new URLTag
                {
                    Tags = tag
                };
            urlTag.Add(urlTagItem);
        }

        urlData.URLTag = urlTag;

        #endregion


        #region Create BODY model

        Body body = new();
        body.Value = this?.body;

        List<Tag> tagsToBody = new List<Tag>();

        for (int i = 0; i < bodyParamsName.Count; i++)
        {
            string paramName = bodyParamsName[i];
            string paramValue = bodyParamsValue[i];

            Tag tag = new Tag
                {
                    Name = paramName,
                    Value = paramValue
                };
            tagsToBody.Add(tag);
        }

        List<BodyTag> bodyTag = new List<BodyTag>();

        foreach (var tag in tagsToBody)
        {
            BodyTag bodyTagItem = new BodyTag
                {
                    Tag = tag
                };
            bodyTag.Add(bodyTagItem);
        }

        body.BodyTag = bodyTag;

        #endregion


        #region Create header

        FrontEnd_GraphQL.Application.Models.SetApis.Configuration configuration = new();
        configuration.Header = new List<Header>();

        Header headers = new Header();

        for (int i = 0; i < headerParamsName.Count; i++)
        {
            string paramName = headerParamsName[i];
            string paramValue = headerParamsValue[i];

            Tag tag = new Tag
                {
                    Name = paramName,
                    Value = paramValue
                };

            HeaderTag headerTag = new HeaderTag
            {
                    Tag = tag
            };

            headers.HeaderTag = headerTag;
            configuration.Header.Add(headers);
        }

        #endregion


        #region Model completed

        configuration.URL = urlData;
        configuration.Body = body;

        apiData.Configuration = configuration;

        #endregion

        responseAPI = await _buildRequestService.CreateRequest(apiData);

    }

    private void SetApiType(ChangeEventArgs args)
    {
        apiTypeSelected = apiTypes?.FirstOrDefault(x => x.Name == args?.Value?.ToString());
    }


    void setUrlParams(string name, string value)
    {
        if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(value))
        {
            urlParamsName.Add(name);
            urlParamsValue.Add(value);
            urlParamName = string.Empty;
            urlParamValue = string.Empty;
        }
        displayPreview();
    }

    void deleteUrlParam(string name)
    {
        int index = urlParamsName.FindIndex(header => header == name);
        if (index != -1)
        {
            urlParamsName.RemoveAt(index);
            urlParamsValue.RemoveAt(index);
        }
        displayPreview();
    }

    void setHeaderParams(string name, string value)
    {
        if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(value))
        {
            headerParamsName.Add(name);
            headerParamsValue.Add(value);
            headerParamName = string.Empty;
            headerParamValue = string.Empty;
        }
        displayPreview();
    }

    void deleteHeaderParam(string name)
    {
        int index = headerParamsName.FindIndex(header => header == name);
        if (index != -1)
        {
            headerParamsName.RemoveAt(index);
            headerParamsValue.RemoveAt(index);
        }
        displayPreview();
    }

    void setBodyParams(string name, string value)
    {
        if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(value))
        {
            bodyParamsName.Add(name);
            bodyParamsValue.Add(value);
            bodyParamName = string.Empty;
            bodyParamValue = string.Empty;
        }
        displayPreview();
    }

    void deleteBodyParam(string name)
    {
        int index = urlParamsName.FindIndex(header => header == name);
        if (index != -1)
        {
            bodyParamsName.RemoveAt(index);
            bodyParamsValue.RemoveAt(index);
        }
        displayPreview();
    }

    void displayPreview()
    {
        preview = "<b>curl</b>";

        for (int i = 0; i < headerParamsName.Count; i++)
        {
            preview += $" <b>-H</b> {headerParamsName[i]} : {headerParamsValue[i]}<br>";
        }

        if (httpMethodSelected != null)
        {
            preview += $" <b>-X</b>{httpMethodSelected.Name}<br>";
        }

        if (url != null)
        {
            preview += $" {url}<br>";

            // if (urlParamsName.Count > 0 && urlParamsValue.Count > 0)
            // {
            //     preview += "?";
            //     for (int i = 0; i < urlParamsName.Count; i++)
            //     {
            //         preview += $"{urlParamsName[i]}={urlParamsValue[i]}";

            //         if (i != urlParamsName.Count - 1)
            //         {
            //             preview += "&";
            //         }
            //     }
            // }
        }

        if (body != null)
        {
            var formattedBody = JsonConvert.SerializeObject(body, Formatting.Indented);
            var newString = formattedBody.Replace("\n", "<br />");


            preview += $" <b>-d</b> {formattedJson(body)}<br>";
        }
    }

    private void HandleHTTPMethodChange(ChangeEventArgs args)
    {
        httpMethodSelected = httpMethods?.FirstOrDefault(x => x.Name == args?.Value?.ToString());
    }

    MarkupString ConvertToMarkupString(string text)
    {
        return new MarkupString(text);
    }

    private string formattedJson(string text)
    {
        string jsonFormatted = "";
        int indentationLevel = 0;

        for (int i = 0; i < text.Length; i++)
        {
            char currentChar = text[i];
            char nextChar = i + 1 < text.Length ? text[i + 1] : '\0';

            jsonFormatted += currentChar;
            if (currentChar == '{' || currentChar == '[')
            {
                indentationLevel++;
                jsonFormatted += "<br>" + new string('\u00A0', indentationLevel * 2);
            }
            else if (currentChar == '}' || currentChar == ']')
            {
                indentationLevel--;
                jsonFormatted += "<br>" + new string('\u00A0', indentationLevel * 2);
            }
            else if (currentChar == ',')
            {
                jsonFormatted += "<br>" + new string('\u00A0', indentationLevel * 2);
            }
        }

        return jsonFormatted;
    }

    void ShowApiFields()
    {
        showApiFields = true;
    }

    void GetApiData(Guid? apiId)
    {
        ShowApiFields();

    }

}
